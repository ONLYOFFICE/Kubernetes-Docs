{{- if and (eq (include "ds.upgrade.createConfigMap" .) "true") .Values.upgrade.job.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: pre-upgrade
  namespace: {{ include "ds.namespace" . | quote }}
  {{- if .Values.commonLabels }}
  labels:
    {{- include "ds.labels.commonLabels" . | trim | nindent 4 }}
  {{- end }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  stop.sh: |-
    #!/bin/bash
    curlout="$(curl -v http://docservice:8000/internal/cluster/inactive -X PUT -s)"
    if [[ "${curlout}" != "true" ]]; then
      echo -e "\e[0;31m The server could not be disabled \e[0m"
      exit 1
    else
      {{- if eq .Values.connections.dbType "postgres" }}
      PGPASSWORD=$DB_PWD psql --host={{ .Values.connections.dbHost }} \
        --port={{ .Values.connections.dbPort }} \
        --user={{ .Values.connections.dbUser }} \
        --dbname={{ .Values.connections.dbName }} -c "\dt" > /dev/null
      {{- else if or (eq .Values.connections.dbType "mysql") (eq .Values.connections.dbType "mariadb") }}
      mysql -h {{ .Values.connections.dbHost }} \
        -P {{ .Values.connections.dbPort }} \
        -u {{ .Values.connections.dbUser }} \
        -p$DB_PWD \
        -e "show databases;" > /dev/null
      {{- end }}
      if [ $? -ne 0 ]; then
        echo -e "\e[0;31m DB is not available \e[0m"
        exit 1
      fi
      FILES_DIR=/var/lib/{{ .Values.product.name }}/documentserver/App_Data/cache/files/
      ls $FILES_DIR > /dev/null
      if [ $? -ne 0 ]; then
        echo -e "\e[0;31m Error accessing the $FILES_DIR directory \e[0m"
        exit 1
      fi
      for ENTRY in `ls $FILES_DIR`; do
        case $ENTRY in
          errors)
            ;;
          forgotten)
            ;;
          *)
            rm -rfv $FILES_DIR$ENTRY
            ;;
        esac
      done
      if [[ "$PRIVATE_CLUSTER" != "true" ]]; then
        wget -O /sql/{{ .Values.upgrade.existingConfigmap.tblRemove.keyName }} \
          {{- if eq .Values.connections.dbType "postgres" }}
          https://raw.githubusercontent.com/ONLYOFFICE/server/{{ template "ds.sqlScripts.branchName" . }}/schema/postgresql/removetbl.sql
          {{- else if or (eq .Values.connections.dbType "mysql") (eq .Values.connections.dbType "mariadb") }}
          https://raw.githubusercontent.com/ONLYOFFICE/server/{{ template "ds.sqlScripts.branchName" . }}/schema/mysql/removetbl.sql
          {{- end }}
        wget -O /sql/{{ .Values.upgrade.existingConfigmap.tblCreate.keyName }} \
          {{- if eq .Values.connections.dbType "postgres" }}
          https://raw.githubusercontent.com/ONLYOFFICE/server/{{ template "ds.sqlScripts.branchName" . }}/schema/postgresql/createdb.sql
          {{- else if or (eq .Values.connections.dbType "mysql") (eq .Values.connections.dbType "mariadb") }}
          https://raw.githubusercontent.com/ONLYOFFICE/server/{{ template "ds.sqlScripts.branchName" . }}/schema/mysql/createdb.sql
          {{- end }}
      fi
      {{- if eq .Values.connections.dbType "postgres" }}
      PGPASSWORD=$DB_PWD psql --host={{ .Values.connections.dbHost }} \
        --port={{ .Values.connections.dbPort }} \
        --user={{ .Values.connections.dbUser }} \
        --dbname={{ .Values.connections.dbName }} \
        --file=/sql/{{ .Values.upgrade.existingConfigmap.tblRemove.keyName }}
      PGPASSWORD=$DB_PWD psql --host={{ .Values.connections.dbHost }} \
        --port={{ .Values.connections.dbPort }} \
        --user={{ .Values.connections.dbUser }} \
        --dbname={{ .Values.connections.dbName }} \
        --file=/sql/{{ .Values.upgrade.existingConfigmap.tblCreate.keyName }}
      {{- else if or (eq .Values.connections.dbType "mysql") (eq .Values.connections.dbType "mariadb") }}
      mysql -h {{ .Values.connections.dbHost }} \
        -P {{ .Values.connections.dbPort }} \
        -u {{ .Values.connections.dbUser }} \
        -p$DB_PWD \
        {{ .Values.connections.dbName }} < /sql/{{ .Values.upgrade.existingConfigmap.tblRemove.keyName }}
      mysql -h {{ .Values.connections.dbHost }} \
        -P {{ .Values.connections.dbPort }} \
        -u {{ .Values.connections.dbUser }} \
        -p$DB_PWD \
        {{ .Values.connections.dbName }} < /sql/{{ .Values.upgrade.existingConfigmap.tblCreate.keyName }}
      {{- end }}
      echo work done
    fi
{{- end }}
