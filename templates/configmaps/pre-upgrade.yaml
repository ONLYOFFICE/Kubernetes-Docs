{{- if and (eq (include "ds.upgrade.createConfigMap" .) "true") .Values.upgrade.job.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ds.resources.name" (list . .Values.commonNameSuffix "pre-upgrade") }}
  namespace: {{ include "ds.namespace" . | quote }}
  {{- if .Values.commonLabels }}
  labels:
    {{- include "ds.labels.commonLabels" . | trim | nindent 4 }}
  {{- end }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    {{- if .Values.commonAnnotations }}
    {{- include "ds.annotations.commonAnnotations" ( dict "keyName" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
data:
  stop.sh: |-
    #!/bin/bash
    curlout="$(curl -v http://{{ include "ds.resources.name" (list . .Values.commonNameSuffix "docservice") }}:8000/internal/cluster/inactive -X PUT -s)"
    if [[ "${curlout}" != "true" ]]; then
      echo -e "\e[0;31m The server could not be disabled \e[0m"
      exit 1
    else
      {{- if eq .Values.connections.dbType "postgres" }}
      PGPASSWORD=$DB_PWD psql --host={{ .Values.connections.dbHost }} \
        --port={{ .Values.connections.dbPort }} \
        --user={{ .Values.connections.dbUser }} \
        --dbname={{ .Values.connections.dbName }} -c "\dt" > /dev/null
      {{- else if or (eq .Values.connections.dbType "mysql") (eq .Values.connections.dbType "mariadb") }}
      mysql -h {{ .Values.connections.dbHost }} \
        -P {{ .Values.connections.dbPort }} \
        -u {{ .Values.connections.dbUser }} \
        -p$DB_PWD \
        -e "show databases;" > /dev/null
      {{- else if eq .Values.connections.dbType "mssql" }}
      /opt/mssql-tools18/bin/sqlcmd -S {{ .Values.connections.dbHost }},{{ .Values.connections.dbPort }} \
        -U {{ .Values.connections.dbUser }} \
        -P $DB_PWD \
        -d {{ .Values.connections.dbName }} -C -Q "SELECT 1" > /dev/null
      {{- end }}
      {{- if or (eq .Values.connections.dbType "postgres") (eq .Values.connections.dbType "mysql") (eq .Values.connections.dbType "mariadb") (eq .Values.connections.dbType "mssql") }}
      if [ $? -ne 0 ]; then
        echo -e "\e[0;31m DB is not available \e[0m"
        exit 1
      else
        echo -e "\e[0;32m Successful connection to the database \e[0m"
      fi
      {{- end }}
      {{- if (eq .Values.connections.dbType "oracle") }}
      DB_TEST_CONNECT=$(echo "SELECT * FROM v\$version;" | sqlplus {{ .Values.connections.dbUser }}/$DB_PWD@//{{ .Values.connections.dbHost }}:{{ .Values.connections.dbPort }}/{{ .Values.connections.dbName }} | grep "Connected" | wc -l)
      {{- else if (eq .Values.connections.dbType "dameng") }}
      DB_TEST_CONNECT=$(echo "SELECT * FROM v\$version;" | disql {{ .Values.connections.dbUser }}/$DB_PWD@{{ .Values.connections.dbHost }}:{{ .Values.connections.dbPort }} | grep "Server" | wc -l)
      {{- end }}
      {{- if or (eq .Values.connections.dbType "oracle") (eq .Values.connections.dbType "dameng") }}
      if [ "${DB_TEST_CONNECT}" -ne '0' ]; then
        echo -e "\e[0;32m Successful connection to the database \e[0m"
      else
        echo -e "\e[0;31m DB is not available \e[0m"
        exit 1
      fi
      {{- end }}
      if [[ "$PRIVATE_CLUSTER" != "true" ]]; then
        wget -O /scripts/{{ .Values.upgrade.existingConfigmap.tblRemove.keyName }} \
          {{- if eq .Values.connections.dbType "postgres" }}
          https://raw.githubusercontent.com/ONLYOFFICE/server/{{ template "ds.sqlScripts.branchName" . }}/schema/postgresql/removetbl.sql
          {{- else if or (eq .Values.connections.dbType "mysql") (eq .Values.connections.dbType "mariadb") }}
          https://raw.githubusercontent.com/ONLYOFFICE/server/{{ template "ds.sqlScripts.branchName" . }}/schema/mysql/removetbl.sql
          {{- else if (eq .Values.connections.dbType "mssql") }}
          https://raw.githubusercontent.com/ONLYOFFICE/server/{{ template "ds.sqlScripts.branchName" . }}/schema/mssql/removetbl.sql
          {{- else if (eq .Values.connections.dbType "oracle") }}
          https://raw.githubusercontent.com/ONLYOFFICE/server/{{ template "ds.sqlScripts.branchName" . }}/schema/oracle/removetbl.sql
          {{- else if (eq .Values.connections.dbType "dameng") }}
          https://raw.githubusercontent.com/ONLYOFFICE/server/{{ template "ds.sqlScripts.branchName" . }}/schema/dameng/removetbl.sql
          {{- end }}
        wget -O /scripts/{{ .Values.upgrade.existingConfigmap.tblCreate.keyName }} \
          {{- if eq .Values.connections.dbType "postgres" }}
          https://raw.githubusercontent.com/ONLYOFFICE/server/{{ template "ds.sqlScripts.branchName" . }}/schema/postgresql/createdb.sql
          {{- else if or (eq .Values.connections.dbType "mysql") (eq .Values.connections.dbType "mariadb") }}
          https://raw.githubusercontent.com/ONLYOFFICE/server/{{ template "ds.sqlScripts.branchName" . }}/schema/mysql/createdb.sql
          {{- else if (eq .Values.connections.dbType "mssql") }}
          https://raw.githubusercontent.com/ONLYOFFICE/server/{{ template "ds.sqlScripts.branchName" . }}/schema/mssql/createdb.sql
          {{- else if (eq .Values.connections.dbType "oracle") }}
          https://raw.githubusercontent.com/ONLYOFFICE/server/{{ template "ds.sqlScripts.branchName" . }}/schema/oracle/createdb.sql
          {{- else if (eq .Values.connections.dbType "dameng") }}
          https://raw.githubusercontent.com/ONLYOFFICE/server/{{ template "ds.sqlScripts.branchName" . }}/schema/dameng/createdb.sql
          {{- end }}
      fi
      {{- if eq .Values.connections.dbType "postgres" }}
      PGPASSWORD=$DB_PWD psql --host={{ .Values.connections.dbHost }} \
        --port={{ .Values.connections.dbPort }} \
        --user={{ .Values.connections.dbUser }} \
        --dbname={{ .Values.connections.dbName }} \
        --variable=ON_ERROR_STOP=ON \
        --file=/scripts/{{ .Values.upgrade.existingConfigmap.tblRemove.keyName }}
      PGPASSWORD=$DB_PWD psql --host={{ .Values.connections.dbHost }} \
        --port={{ .Values.connections.dbPort }} \
        --user={{ .Values.connections.dbUser }} \
        --dbname={{ .Values.connections.dbName }} \
        --variable=ON_ERROR_STOP=ON \
        --file=/scripts/{{ .Values.upgrade.existingConfigmap.tblCreate.keyName }}
      {{- else if or (eq .Values.connections.dbType "mysql") (eq .Values.connections.dbType "mariadb") }}
      mysql -h {{ .Values.connections.dbHost }} \
        -P {{ .Values.connections.dbPort }} \
        -u {{ .Values.connections.dbUser }} \
        -p$DB_PWD \
        {{ .Values.connections.dbName }} < /scripts/{{ .Values.upgrade.existingConfigmap.tblRemove.keyName }}
      mysql -h {{ .Values.connections.dbHost }} \
        -P {{ .Values.connections.dbPort }} \
        -u {{ .Values.connections.dbUser }} \
        -p$DB_PWD \
        {{ .Values.connections.dbName }} < /scripts/{{ .Values.upgrade.existingConfigmap.tblCreate.keyName }}
      {{- else if (eq .Values.connections.dbType "mssql") }}
      /opt/mssql-tools18/bin/sqlcmd -S {{ .Values.connections.dbHost }},{{ .Values.connections.dbPort }} \
        -U {{ .Values.connections.dbUser }} \
        -P $DB_PWD \
        -d {{ .Values.connections.dbName }} -C < /scripts/{{ .Values.upgrade.existingConfigmap.tblRemove.keyName }}
      /opt/mssql-tools18/bin/sqlcmd -S {{ .Values.connections.dbHost }},{{ .Values.connections.dbPort }} \
        -U {{ .Values.connections.dbUser }} \
        -P $DB_PWD \
        -d {{ .Values.connections.dbName }} -C < /scripts/{{ .Values.upgrade.existingConfigmap.tblCreate.keyName }}
      {{- else if (eq .Values.connections.dbType "oracle") }}
      sqlplus {{ .Values.connections.dbUser }}/$DB_PWD@//{{ .Values.connections.dbHost }}:{{ .Values.connections.dbPort }}/{{ .Values.connections.dbName }} @/scripts/{{ .Values.upgrade.existingConfigmap.tblRemove.keyName }}
      sqlplus {{ .Values.connections.dbUser }}/$DB_PWD@//{{ .Values.connections.dbHost }}:{{ .Values.connections.dbPort }}/{{ .Values.connections.dbName }} @/scripts/{{ .Values.upgrade.existingConfigmap.tblCreate.keyName }}
      {{- else if (eq .Values.connections.dbType "dameng") }}
      disql {{ .Values.connections.dbUser }}/$DB_PWD@{{ .Values.connections.dbHost }}:{{ .Values.connections.dbPort }} \`/scripts/{{ .Values.upgrade.existingConfigmap.tblRemove.keyName }}
      disql {{ .Values.connections.dbUser }}/$DB_PWD@{{ .Values.connections.dbHost }}:{{ .Values.connections.dbPort }} \`/scripts/{{ .Values.upgrade.existingConfigmap.tblCreate.keyName }}
      {{- end }}
      if [ $? -ne 0 ]; then
        echo -e "\e[0;31m The DATABASE preparation scripts could not be executed \e[0m"
        exit 1
      fi
      echo work done
    fi
{{- end }}
