apiVersion: apps/v1
kind: Deployment
metadata:
  name: converter
  namespace: {{ include "ds.namespace" . | quote }}
  labels:
    app: converter
    {{- if .Values.commonLabels }}
    {{- include "ds.labels.commonLabels" . | trim | nindent 4 }}
    {{- end }}
spec:
  {{- if not .Values.converter.autoscaling.enabled }}
  replicas: {{ .Values.converter.replicas }}
  {{- end }}
  selector:
    matchLabels:
      app: converter
      {{- if .Values.commonLabels }}
      {{- include "ds.labels.commonLabels" . | trim | nindent 6 }}
      {{- end }}
  {{- if .Values.converter.updateStrategy }}
  strategy: {{- toYaml .Values.converter.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels:
        app: converter
        {{- if .Values.commonLabels }}
        {{- include "ds.labels.commonLabels" . | trim | nindent 8 }}
        {{- end }}
      {{- if .Values.converter.podAnnotations }}
      annotations:
        {{- range $key, $value := .Values.converter.podAnnotations }}
        {{ $key }}: {{ tpl $value $ }}
        {{- end }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "ds.serviceAccountName" . }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- toYaml .Values.podSecurityContext.converter | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
        {{- if eq .Values.podAntiAffinity.type "soft" }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - converter
              topologyKey: {{ .Values.podAntiAffinity.topologyKey }}
            weight: {{ .Values.podAntiAffinity.weight }}
        {{- else if eq .Values.podAntiAffinity.type "hard" }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - converter
            topologyKey: {{ .Values.podAntiAffinity.topologyKey }}
        {{- end }}
        {{- with .Values.converter.podAffinity }}
        podAffinity:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.converter.nodeAffinity }}
        nodeAffinity:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{ toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{ toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      volumes:
        - name: ds-files
          persistentVolumeClaim:
            claimName: {{ template "ds.pvc.name" . }}
        - name: ds-license
          {{- if .Values.license.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.license.existingClaim }}
          {{- else }}
          secret:
            secretName: {{ template "ds.license.secretName" . }}
          {{- end }}
        {{- if .Values.extraConf.configMap }}
        - name: custom-file
          configMap:
            name: {{ .Values.extraConf.configMap }}
        {{- end }}
        {{- if .Values.extraThemes.configMap }}
        - name: custom-themes
          configMap:
            name: {{ .Values.extraThemes.configMap }}
        {{- end }}
      {{- with .Values.converter.initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: converter
          image: {{ .Values.converter.image.repository }}:{{ .Values.converter.image.tag }}
          imagePullPolicy: {{ .Values.converter.image.pullPolicy }}
          resources: {{- toYaml .Values.converter.resources | nindent 12 }}
          env:
          - name: DB_PWD
            valueFrom:
              secretKeyRef:
                name: {{ template "ds.db.secretName" . }}
                key: {{ .Values.connections.dbSecretKeyName }}
          - name: AMQP_PWD
            valueFrom:
              secretKeyRef:
                name: {{ template "ds.rabbitmq.secretName" . }}
                key: {{ .Values.connections.amqpSecretKeyName }}
          - name: REDIS_SERVER_PWD
            valueFrom:
              secretKeyRef:
                name: {{ template "ds.redis.secretName" . }}
                key: {{ .Values.connections.redisSecretKeyName }}
          envFrom:
          - secretRef:
              name: {{ template "ds.jwt.secretName" . }}
          - configMapRef:
              name: documentserver
          volumeMounts:
          - name: ds-files
            mountPath: /var/lib/{{ .Values.product.name }}/documentserver/App_Data/cache/files
          - name: ds-license
            mountPath: /var/www/{{ .Values.product.name }}/Data
            {{- if not .Values.license.existingClaim }}
            readOnly: true
            {{- end }}
          {{- if .Values.extraConf.configMap }}
          - name: custom-file
            mountPath: /etc/{{ .Values.product.name }}/documentserver/{{ .Values.extraConf.filename }}
            subPath: {{ .Values.extraConf.filename }}
          {{- end }}
          {{- if .Values.extraThemes.configMap }}
          - name: custom-themes
            mountPath: /var/www/{{ .Values.product.name }}/documentserver/web-apps/apps/common/main/resources/themes/{{ .Values.extraThemes.filename }}
            subPath: {{ .Values.extraThemes.filename }}
          {{- end }}
