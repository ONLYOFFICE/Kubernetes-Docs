apiVersion: apps/v1
kind: Deployment
metadata:
  name: converter
  labels:
    app: converter
spec:
  replicas: {{ .Values.converter.replicas }}
  selector:
    matchLabels:
      app: converter
  template:
    metadata:
      labels:
        app: converter
    spec:
#      securityContext:
#        runAsUser: 101
#        runAsGroup: 101
      affinity:
        podAntiAffinity:
        {{- if eq .Values.antiAffinity.type "soft" }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - converter
              topologyKey: {{ .Values.antiAffinity.topologyKey }}
            weight: {{ .Values.antiAffinity.weight }}
        {{- else if eq .Values.antiAffinity.type "hard" }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - converter
            topologyKey: {{ .Values.antiAffinity.topologyKey }}
        {{- end }}
      volumes:
        - name: ds-files
          persistentVolumeClaim:
            claimName: ds-files
        - name: ds-license
          secret:
            secretName: license
        {{ if .Values.extraConf.configMap }}
        - name: custom-file
          configMap:
            name: {{ .Values.extraConf.configMap }}
        {{ end }}
      containers:
        - name: converter
          image: {{ .Values.converter.containerImage }}
          resources: {{- toYaml .Values.converter.resources | nindent 12 }}
          env:
          - name: DB_PWD
            valueFrom:
              secretKeyRef:
                name: postgresql
                key: postgresql-password
          - name: AMQP_PWD
            valueFrom:
              secretKeyRef:
                name: rabbitmq
                key: rabbitmq-password
          envFrom:
          - secretRef:
              name: jwt
          - configMapRef:
              name: documentserver
          volumeMounts:
          - name: ds-files
            mountPath: /var/lib/{{ .Values.product.name }}/documentserver/App_Data/cache/files
          - name: ds-license
            mountPath: /var/www/{{ .Values.product.name }}/Data
            readOnly: true
          {{ if .Values.extraConf.configMap }}
          - name: custom-file
            mountPath: /etc/{{ .Values.product.name }}/documentserver/{{ .Values.extraConf.filename }}
            subPath: {{ .Values.extraConf.filename }}
          {{ end }}
