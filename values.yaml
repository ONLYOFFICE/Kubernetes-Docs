product:
  name: onlyoffice

connections:
  dbType: postgres
  dbHost: postgresql
  dbUser: postgres
  dbPort: "5432"
  dbName: postgres
  dbExistingSecret: postgresql
  dbSecretKeyName: postgres-password
  dbPassword: ""
  redisHost: redis-master
  redisPort: "6379"
  redisUser: default
  redisDBNum: "0"
  redisExistingSecret: redis
  redisSecretKeyName: redis-password
  redisPassword: ""
  redisNoPass: false
  amqpType: rabbitmq
  amqpHost: rabbitmq
  amqpPort: "5672"
  amqpVhost: "/"
  amqpUser: user
  amqpProto: amqp
  amqpExistingSecret: rabbitmq
  amqpSecretKeyName: rabbitmq-password
  amqpPassword: ""

persistence:
  existingClaim: ""
  storageClass: "nfs"
  size: 8Gi

##Example:
##commonLabels:
##  app.kubernetes.io/version: "{{ .Chart.Version }}"
##  app.kubernetes.io/name: docs
commonLabels: {}

license:
  existingSecret: ""
  existingClaim: ""

log:
  level: WARN
  type: pattern
  pattern: "[%d] [%p] %c - %.10000m"

wopi:
  enabled: false

metrics:
  enabled: false
  host: statsd-exporter-prometheus-statsd-exporter
  port: "8125"
  prefix: ds.

example:
  enabled: false
  podAnnotations:
    rollme: "{{ randAlphaNum 5 | quote }}"
  updateStrategy:
    type: RollingUpdate
  ## Pod affinity rules for Example Pod scheduling by nodes relative to other Pods
  ## Pod affinity allow you to constrain which nodes Example Pod can be scheduled on based on the labels of Pods already running on that node
  ## ref https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ## Example:
  ##podAffinity:
  ##  requiredDuringSchedulingIgnoredDuringExecution:
  ##  - labelSelector:
  ##      matchExpressions:
  ##      - key: app
  ##        operator: In
  ##        values:
  ##        - store
  ##    topologyKey: topology.kubernetes.io/zone
  ##  preferredDuringSchedulingIgnoredDuringExecution:
  ##  - weight: 100
  ##    podAffinityTerm:
  ##      labelSelector:
  ##        matchExpressions:
  ##        - key: app
  ##          operator: NotIn
  ##          values:
  ##          - database
  ##      topologyKey: kubernetes.io/hostname
  ##
  podAffinity: {}
  ## Node affinity rules for Example Pod scheduling by nodes
  ## Node affinity allow you to constrain which nodes Example Pod can be scheduled on based on node labels
  ## ref https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ## Example:
  ##nodeAffinity:
  ##  preferredDuringSchedulingIgnoredDuringExecution:
  ##  - weight: 100
  ##    preference:
  ##      matchExpressions:
  ##      - key: kubernetes.io/name
  ##        operator: In
  ##        values:
  ##        - name1
  ##        - name2
  ##  requiredDuringSchedulingIgnoredDuringExecution:
  ##    nodeSelectorTerms:
  ##    - matchExpressions:
  ##      - key: topology.kubernetes.io/zone
  ##        operator: NotIn
  ##        values:
  ##        - zone1
  ##        - zone2
  ##
  nodeAffinity: {}
  image:
    repository: onlyoffice/docs-example
    tag: 7.2.1-1
    pullPolicy: IfNotPresent
  containerPorts:
    http: 3000
  dsUrl: "/"
  resources:
    ##Example:
    ##requests:
    ##  memory: "128Mi"
    ##  cpu: "100m"
    requests: {}
    ##limits:
    ##  memory: "128Mi"
    ##  cpu: "250m"
    limits: {}

extraConf:
  configMap: ""
  filename: local.json

extraThemes:
  configMap: ""
  filename: custom-themes.json

podAntiAffinity:
  type: "soft"
  topologyKey: kubernetes.io/hostname
  weight: "100"

nodeSelector: {}

tolerations: []

docservice:
  podAnnotations:
    rollme: "{{ randAlphaNum 5 | quote }}"
  replicas: 2
  updateStrategy:
    type: Recreate
  ## Pod affinity rules for Docservice Pods scheduling by nodes relative to other Pods
  ## Pod affinity allow you to constrain which nodes Docservice Pods can be scheduled on based on the labels of Pods already running on that node
  ## ref https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ## Example:
  ##podAffinity:
  ##  requiredDuringSchedulingIgnoredDuringExecution:
  ##  - labelSelector:
  ##      matchExpressions:
  ##      - key: app
  ##        operator: In
  ##        values:
  ##        - store
  ##    topologyKey: topology.kubernetes.io/zone
  ##
  podAffinity: {}
  ## Node affinity rules for Docservice Pods scheduling by nodes
  ## Node affinity allow you to constrain which nodes Docservice Pod can be scheduled on based on node labels
  ## ref https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ## Example:
  ##nodeAffinity:
  ##  preferredDuringSchedulingIgnoredDuringExecution:
  ##  - weight: 100
  ##    preference:
  ##      matchExpressions:
  ##      - key: kubernetes.io/name
  ##        operator: In
  ##        values:
  ##        - name1
  ##        - name2
  ##
  nodeAffinity: {}
  image:
    repository: onlyoffice/docs-docservice-de
    tag: 7.2.1-1
    pullPolicy: IfNotPresent
  containerPorts:
    http: 8000
  startupProbe:
    enabled: true
    httpGet:
      path: /index.html
      port: 8000
    failureThreshold: 30
    periodSeconds: 10
  readinessProbe:
    enabled: true
    failureThreshold: 2
    httpGet:
      path: /index.html
      port: 8000
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 3
  livenessProbe:
    enabled: true
    failureThreshold: 3
    httpGet:
      path: /index.html
      port: 8000
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 3
  resources:
    ##Example:
    ##requests:
    ##  memory: "256Mi"
    ##  cpu: "100m"
    requests: {}
    ##limits:
    ##  memory: "2Gi"
    ##  cpu: "1000m"
    limits: {}
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 4
    targetCPU:
      enabled: true
      utilizationPercentage: 70
    targetMemory:
      enabled: false
      utilizationPercentage: 70
    ##Example:
    ##customMetricsType:
    ##  - type: Object
    ##    object:
    ##      metric:
    ##        name: requests-per-second
    ##      describedObject:
    ##        apiVersion: networking.k8s.io/v1
    ##        kind: Ingress
    ##        name: main-route
    ##      target:
    ##        type: Value
    ##        value: 2k
    customMetricsType: []
    ##Example:
    ##behavior:
    ##  scaleDown:
    ##    stabilizationWindowSeconds: 300
    ##    policies:
    ##    - type: Pods
    ##      value: 4
    ##      periodSeconds: 60
    ##  scaleUp:
    ##    stabilizationWindowSeconds: 0
    ##    policies:
    ##    - type: Percent
    ##      value: 70
    ##      periodSeconds: 15
    ##    selectPolicy: Max
    behavior: {}

proxy:
  gzipProxied: "off"
  secureLinkSecret: verysecretstring
  ##Example:
  ##infoAllowedIP:
  ##- 10.244.0.79
  ##- 192.168.1.0/24
  infoAllowedIP: []
  image:
    repository: onlyoffice/docs-proxy-de
    tag: 7.2.1-1
    pullPolicy: IfNotPresent
  containerPorts:
    http: 8888
  startupProbe:
    enabled: true
    httpGet:
      path: /index.html
      port: 8888
    failureThreshold: 30
    periodSeconds: 10
  readinessProbe:
    enabled: true
    failureThreshold: 2
    httpGet:
      path: /index.html
      port: 8888
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 3
  livenessProbe:
    enabled: true
    failureThreshold: 3
    httpGet:
      path: /index.html
      port: 8888
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 3
  resources:
    ##Example:
    ##requests:
    ##  memory: "256Mi"
    ##  cpu: "100m"
    requests: {}
    ##limits:
    ##  memory: "2Gi"
    ##  cpu: "1000m"
    limits: {}

converter:
  podAnnotations:
    rollme: "{{ randAlphaNum 5 | quote }}"
  replicas: 2
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  ## Pod affinity rules for Converter Pods scheduling by nodes relative to other Pods
  ## Pod affinity allow you to constrain which nodes Converter Pod can be scheduled on based on the labels of Pods already running on that node
  ## ref https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ## Example:
  ##podAffinity:
  ##  preferredDuringSchedulingIgnoredDuringExecution:
  ##  - weight: 100
  ##    podAffinityTerm:
  ##      labelSelector:
  ##        matchExpressions:
  ##        - key: app
  ##          operator: NotIn
  ##          values:
  ##          - database
  ##      topologyKey: kubernetes.io/hostname
  ##
  podAffinity: {}
  ## Node affinity rules for Converter Pods scheduling by nodes
  ## Node affinity allow you to constrain which nodes Converter Pod can be scheduled on based on node labels
  ## ref https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ## Example:
  ##nodeAffinity:
  ##  requiredDuringSchedulingIgnoredDuringExecution:
  ##    nodeSelectorTerms:
  ##    - matchExpressions:
  ##      - key: topology.kubernetes.io/zone
  ##        operator: In
  ##        values:
  ##        - zone1
  ##        - zone2
  ##
  nodeAffinity: {}
  image:
    repository: onlyoffice/docs-converter-de
    tag: 7.2.1-1
    pullPolicy: IfNotPresent
  resources:
    ##Example:
    ##requests:
    ##  memory: "256Mi"
    ##  cpu: "200m"
    requests: {}
    ##limits:
    ##  memory: "2Gi"
    ##  cpu: "1000m"
    limits: {}
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 16
    targetCPU:
      enabled: true
      utilizationPercentage: 70
    targetMemory:
      enabled: false
      utilizationPercentage: 70
    ##Example:
    ##customMetricsType:
    ##  - type: Pods
    ##    pods:
    ##      metric:
    ##        name: packets-per-second
    ##      target:
    ##        type: AverageValue
    ##        averageValue: 1k
    customMetricsType: []
    ##Example:
    ##behavior:
    ##  scaleDown:
    ##    stabilizationWindowSeconds: 300
    ##    policies:
    ##    - type: Percent
    ##      value: 10
    ##      periodSeconds: 60
    ##  scaleUp:
    ##    stabilizationWindowSeconds: 0
    ##    policies:
    ##    - type: Percent
    ##      value: 10
    ##      periodSeconds: 15
    ##    - type: Pods
    ##      value: 2
    ##      periodSeconds: 15
    ##    selectPolicy: Max
    behavior: {}

jwt:
  enabled: true
  secret: "MYSECRET"
  header: "Authorization"
  inBody: false
  ##Example:
  ##inbox:
  ##  enabled: true
  ##  secret: "MYSECRET"
  ##  header: "Authorization"
  inbox: {}
  ##outbox:
  ##  enabled: true
  ##  secret: "MYSECRET"
  ##  header: "Authorization"
  outbox: {}
  existingSecret: ""

service:
  existing: ""
  annotations: {}
  type: ClusterIP
  port: 8888

ingress:
  enabled: false
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 100m
  host: ""
  ssl:
    enabled: false
    secret: tls

grafana_ingress:
  enabled: false

podSecurityContext:
  enabled: false
  converter:
    runAsUser: 101
    runAsGroup: 101
  docservice:
    runAsUser: 101
    runAsGroup: 101
  jobs:
    runAsUser: 101
    runAsGroup: 101
  example:
    runAsUser: 1001
    runAsGroup: 1001

sqlScripts:
  branchName: master

webProxy:
  enabled: false
  http: "http://proxy.example.com"
  https: "https://proxy.example.com"
  noProxy: "localhost,127.0.0.1,docservice"

privateCluster: false

install:
  job:
    enabled: true
    image:
      repository: onlyoffice/docs-utils
      tag: 7.2.1-1
      pullPolicy: IfNotPresent
    resources:
      ##Example:
      ##requests:
      ##  memory: "256Mi"
      ##  cpu: "200m"
      requests: {}
      ##limits:
      ##  memory: "2Gi"
      ##  cpu: "1000m"
      limits: {}
  existingConfigmap:
    tblCreate:
      name: init-db-scripts
      keyName: createdb.sql
    initdb: ""

upgrade:
  job:
    enabled: true
    image:
      repository: onlyoffice/docs-utils
      tag: 7.2.1-1
      pullPolicy: IfNotPresent
    resources:
      ##Example:
      ##requests:
      ##  memory: "256Mi"
      ##  cpu: "200m"
      requests: {}
      ##limits:
      ##  memory: "2Gi"
      ##  cpu: "1000m"
      limits: {}
  existingConfigmap:
    tblRemove:
      name: remove-db-scripts
      keyName: removetbl.sql
    tblCreate:
      name: init-db-scripts
      keyName: createdb.sql
    dsStop: ""

rollback:
  job:
    enabled: true
    image:
      repository: onlyoffice/docs-utils
      tag: 7.2.1-1
      pullPolicy: IfNotPresent
    resources:
      ##Example:
      ##requests:
      ##  memory: "256Mi"
      ##  cpu: "200m"
      requests: {}
      ##limits:
      ##  memory: "2Gi"
      ##  cpu: "1000m"
      limits: {}
  existingConfigmap:
    tblRemove:
      name: remove-db-scripts
      keyName: removetbl.sql
    tblCreate:
      name: init-db-scripts
      keyName: createdb.sql
    dsStop: ""

delete:
  job:
    enabled: true
    image:
      repository: onlyoffice/docs-utils
      tag: 7.2.1-1
      pullPolicy: IfNotPresent
    resources:
      ##Example:
      ##requests:
      ##  memory: "256Mi"
      ##  cpu: "200m"
      requests: {}
      ##limits:
      ##  memory: "2Gi"
      ##  cpu: "1000m"
      limits: {}
  existingConfigmap:
    tblRemove:
      name: remove-db-scripts
      keyName: removetbl.sql
    dsStop: ""
